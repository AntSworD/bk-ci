# This is a basic workflow to help you get started with Actions

name: Backend CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
    paths:
    - 'src/backend/ci/**'
  pull_request:
    branches: [master, release-*]
    paths:
    - 'src/backend/ci/**'
  workflow_dispatch:
  workflow_call:
    inputs:
      upload:
        required: true
        type: string

jobs:
  backend-jar:
    name: Build backend -- JAR
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=10
    steps:
    - uses: actions/checkout@v3
    - name: init mysql
      run: |
        export MYSQL_PWD=root
        for i in *.sql;do echo $i;mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot < $i;done
      working-directory: support-files/sql
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: "temurin"
        java-version: "8"
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-docker-${{ hashFiles('src/backend/ci/**/*.gradle.kts', 'src/backend/ci/**/gradle-wrapper.properties','src/backend/ci/buildSrc/**/Versions.kt') }}
    - name: Gradle Build Backend Service
      working-directory: src/backend/ci
      run: |
        ./gradlew clean test build :core:worker:worker-agent:shadowJar \
        -DmysqlURL=127.0.0.1:${{ job.services.mysql.ports['3306'] }} -DmysqlUser=root -DmysqlPasswd=root --no-daemon
    - name: download frontend
      if: ${{ inputs.upload == 'true'  }}
      uses: actions/download-artifact@v3
      with:
        name: frontend
        path: src/frontend/frontend
    - name: download agent
      if: ${{ inputs.upload == 'true'  }}
      uses: actions/download-artifact@v3
      with:
        name: agent
        path: src/agent/bin/
    - name: make package
      if: ${{ inputs.upload == 'true'  }}
      run: |
        version="$(basename $GITHUB_REF)"
        echo "version=$version" >> $GITHUB_OUTPUT
        ci_ms_wip="sign,monitoring" ci_pkg_dir=/dev/shm/ci ./scripts/packager-ci.sh "$version" bkci-slim.tar.gz
    - uses: actions/upload-artifact@v3
      if: ${{ inputs.upload == 'true'  }}
      with:
        name: bkci-slim
        path: bkci-slim.tar.gz

  backend-docker:
    name: Build backend -- Docker
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=10
    steps:
    - uses: actions/checkout@v3
    - name: init mysql
      run: |
        export MYSQL_PWD=root
        for i in *.sql;do echo $i;mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot < $i;done
      working-directory: support-files/sql
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: "temurin"
        java-version: "8"
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-docker-${{ hashFiles('src/backend/ci/**/*.gradle.kts', 'src/backend/ci/**/gradle-wrapper.properties','src/backend/ci/buildSrc/**/Versions.kt') }}
    - name: Gradle Build Backend Service
      working-directory: src/backend/ci
      run: |
        ./gradlew clean test build :core:worker:worker-agent:shadowJar -Ddevops.assemblyMode=KUBERNETES \
        -DmysqlURL=127.0.0.1:${{ job.services.mysql.ports['3306'] }} -DmysqlUser=root -DmysqlPasswd=root --no-daemon
    - name: download frontend
      if: ${{ inputs.upload == 'true'  }}
      uses: actions/download-artifact@v3
      with:
        name: frontend
        path: src/frontend/frontend
    - name: download agent
      if: ${{ inputs.upload == 'true'  }}
      uses: actions/download-artifact@v3
      with:
        name: agent
        path: src/agent/bin/
    - name: make package
      if: ${{ inputs.upload == 'true'  }}
      run: |
        version="$(basename $GITHUB_REF)"
        echo "version=$version" >> $GITHUB_OUTPUT
        ci_ms_wip="sign" ci_pkg_dir=/dev/shm/ci-docker ./scripts/packager-ci.sh "$version" bkci-docker.tar.gz
    - name: setup docker
      if: ${{ inputs.upload == 'true'  }}
      uses: docker-practice/actions-setup-docker@master
    - name: create docker image
      if: ${{ inputs.upload == 'true'  }}
      working-directory: docker-images/core/ci
      run: |
        version="$(basename $GITHUB_REF)"
        docker login --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_PASS }} ${{ secrets.DOCKER_HOST }}
        ./0.get_release.sh
        ./1.build_gateway_image.sh ${{ secrets.DOCKER_IMAGE_REGISTRY }} $version
        ./2.build_backend_bkci_image.sh ${{ secrets.DOCKER_IMAGE_REGISTRY }} $version
        ./3.build_frontend_image.sh ${{ secrets.DOCKER_IMAGE_REGISTRY }} $version
    - name: setup python
      if: ${{ inputs.upload == 'true'  }}
      uses: actions/setup-python@v4
      with:
        python-version: "3.7.15"
    - name: generate helm chart
      if: ${{ inputs.upload == 'true'  }}
      working-directory: helm-charts/core/ci
      run: |
        version="$(basename $GITHUB_REF)"
        echo 'python build'
        pip install pyhumps
        pip install PyYAML
        python build_chart.py ${{ secrets.DOCKER_IMAGE_REGISTRY }} $version $version $version
    - name: install helm
      if: ${{ inputs.upload == 'true'  }}
      uses: azure/setup-helm@v3
      with:
        version: v3.8.1
    - name: package helm chart
      if: ${{ inputs.upload == 'true'  }}
      working-directory: helm-charts/core/ci
      run: |
        version="$(basename $GITHUB_REF)"
        helm package . --version $version --app-version $version
        mv bk-ci-$version.tgz bk-ci-charts.tgz
    - uses: actions/upload-artifact@v3
      if: ${{ inputs.upload == 'true'  }}
      with:
        name: bkci-chart
        path: helm-charts/core/ci/bk-ci-charts.tgz
